/*
 *  Copyright 2009 IP Info DB
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.ipinfodb.rest.services;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.ipinfodb.rest.dao.DaoException;
import com.ipinfodb.rest.dao.LocationDao;
import com.ipinfodb.rest.domain.Location;
import com.ipinfodb.rest.domain.ServiceError;
import com.ipinfodb.rest.net.IpResolver;
import com.ipinfodb.rest.net.IpResolverException;
import com.sun.jersey.impl.ResponseBuilderImpl;

/**
 * 
 * @author Simone Tripodi
 * @version $Id$
 */
@Singleton
@Path("locations")
public final class LocationService {

    private final Log log = LogFactory.getLog(this.getClass());

    @Inject
    private LocationDao locationDao;

    public void setLocationDao(LocationDao locationDao) {
        this.locationDao = locationDao;
    }

    @Path("{userInput:[\\w\\.\\-]+}")
    @GET
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public Location getLocationByIp(@PathParam("userInput") final String userInput) {
        String ipOrHostname = null;
        Location location = null;

        try {
            ipOrHostname = IpResolver.getHostByUserInput(userInput);
        } catch (IpResolverException e) {
            String errorMessage = "Specified input '"
                + userInput
                + "' is neither a valid IP number or host name";
            this.log.error(errorMessage, e);
            ServiceError serviceError = new ServiceError();
            serviceError.setMessage(errorMessage);

            throw new WebApplicationException(new ResponseBuilderImpl()
                    .entity(serviceError)
                    .status(Response.Status.BAD_REQUEST)
                    .build());
        }

        try {
            location = this.locationDao.selectLocationByIp(ipOrHostname);
        } catch (DaoException e) {
            String errorMessage = "An internal error occurred while retrieving location for IP or host name '"
                + userInput
                + "'";
            this.log.error(errorMessage, e);
            ServiceError serviceError = new ServiceError();
            serviceError.setMessage(errorMessage);

            throw new WebApplicationException(new ResponseBuilderImpl()
                    .entity(serviceError)
                    .status(Response.Status.INTERNAL_SERVER_ERROR)
                    .build());
        }

        if (location == null) {
            String warnMessage = "No location found for IP or host name '"
                + userInput
                + "'";
            this.log.warn(warnMessage);
            ServiceError serviceError = new ServiceError();
            serviceError.setMessage(warnMessage);

            throw new WebApplicationException(new ResponseBuilderImpl()
                .entity(serviceError)
                .status(Response.Status.INTERNAL_SERVER_ERROR)
                .build());
        }

        return location;
    }

}
